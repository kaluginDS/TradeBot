// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///Режим торгов инструмента
public enum SecurityTradingStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  ///Торговый статус не определён
  case unspecified // = 0

  ///Недоступен для торгов
  case notAvailableForTrading // = 1

  ///Период открытия торгов
  case openingPeriod // = 2

  ///Период закрытия торгов
  case closingPeriod // = 3

  ///Перерыв в торговле
  case breakInTrading // = 4

  ///Нормальная торговля
  case normalTrading // = 5

  ///Аукцион закрытия
  case closingAuction // = 6

  ///Аукцион крупных пакетов
  case darkPoolAuction // = 7

  ///Дискретный аукцион
  case discreteAuction // = 8

  ///Аукцион открытия
  case openingAuctionPeriod // = 9

  ///Период торгов по цене аукциона закрытия
  case tradingAtClosingAuctionPrice // = 10

  ///Сессия назначена
  case sessionAssigned // = 11

  ///Сессия закрыта
  case sessionClose // = 12

  ///Сессия открыта
  case sessionOpen // = 13

  ///Доступна торговля в режиме внутренней ликвидности брокера
  case dealerNormalTrading // = 14

  ///Перерыв торговли в режиме внутренней ликвидности брокера
  case dealerBreakInTrading // = 15

  ///Недоступна торговля в режиме внутренней ликвидности брокера
  case dealerNotAvailableForTrading // = 16
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .notAvailableForTrading
    case 2: self = .openingPeriod
    case 3: self = .closingPeriod
    case 4: self = .breakInTrading
    case 5: self = .normalTrading
    case 6: self = .closingAuction
    case 7: self = .darkPoolAuction
    case 8: self = .discreteAuction
    case 9: self = .openingAuctionPeriod
    case 10: self = .tradingAtClosingAuctionPrice
    case 11: self = .sessionAssigned
    case 12: self = .sessionClose
    case 13: self = .sessionOpen
    case 14: self = .dealerNormalTrading
    case 15: self = .dealerBreakInTrading
    case 16: self = .dealerNotAvailableForTrading
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .notAvailableForTrading: return 1
    case .openingPeriod: return 2
    case .closingPeriod: return 3
    case .breakInTrading: return 4
    case .normalTrading: return 5
    case .closingAuction: return 6
    case .darkPoolAuction: return 7
    case .discreteAuction: return 8
    case .openingAuctionPeriod: return 9
    case .tradingAtClosingAuctionPrice: return 10
    case .sessionAssigned: return 11
    case .sessionClose: return 12
    case .sessionOpen: return 13
    case .dealerNormalTrading: return 14
    case .dealerBreakInTrading: return 15
    case .dealerNotAvailableForTrading: return 16
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension SecurityTradingStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [SecurityTradingStatus] = [
    .unspecified,
    .notAvailableForTrading,
    .openingPeriod,
    .closingPeriod,
    .breakInTrading,
    .normalTrading,
    .closingAuction,
    .darkPoolAuction,
    .discreteAuction,
    .openingAuctionPeriod,
    .tradingAtClosingAuctionPrice,
    .sessionAssigned,
    .sessionClose,
    .sessionOpen,
    .dealerNormalTrading,
    .dealerBreakInTrading,
    .dealerNotAvailableForTrading,
  ]
}

#endif  // swift(>=4.2)

///Денежная сумма в определенной валюте
public struct MoneyValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// строковый ISO-код валюты
  public var currency: String = String()

  /// целая часть суммы, может быть отрицательным числом
  public var units: Int64 = 0

  /// дробная часть суммы, может быть отрицательным числом
  public var nano: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Котировка - денежная сумма без указания валюты
public struct Quotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// целая часть суммы, может быть отрицательным числом
  public var units: Int64 = 0

  /// дробная часть суммы, может быть отрицательным числом
  public var nano: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Проверка активности стрима.
public struct Ping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Время проверки.
  public var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  public var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  public mutating func clearTime() {self._time = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tinkoff.public.invest.api.contract.v1"

extension SecurityTradingStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SECURITY_TRADING_STATUS_UNSPECIFIED"),
    1: .same(proto: "SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING"),
    2: .same(proto: "SECURITY_TRADING_STATUS_OPENING_PERIOD"),
    3: .same(proto: "SECURITY_TRADING_STATUS_CLOSING_PERIOD"),
    4: .same(proto: "SECURITY_TRADING_STATUS_BREAK_IN_TRADING"),
    5: .same(proto: "SECURITY_TRADING_STATUS_NORMAL_TRADING"),
    6: .same(proto: "SECURITY_TRADING_STATUS_CLOSING_AUCTION"),
    7: .same(proto: "SECURITY_TRADING_STATUS_DARK_POOL_AUCTION"),
    8: .same(proto: "SECURITY_TRADING_STATUS_DISCRETE_AUCTION"),
    9: .same(proto: "SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD"),
    10: .same(proto: "SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE"),
    11: .same(proto: "SECURITY_TRADING_STATUS_SESSION_ASSIGNED"),
    12: .same(proto: "SECURITY_TRADING_STATUS_SESSION_CLOSE"),
    13: .same(proto: "SECURITY_TRADING_STATUS_SESSION_OPEN"),
    14: .same(proto: "SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING"),
    15: .same(proto: "SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING"),
    16: .same(proto: "SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING"),
  ]
}

extension MoneyValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoneyValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "currency"),
    2: .same(proto: "units"),
    3: .same(proto: "nano"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.units) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.nano) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 1)
    }
    if self.units != 0 {
      try visitor.visitSingularInt64Field(value: self.units, fieldNumber: 2)
    }
    if self.nano != 0 {
      try visitor.visitSingularInt32Field(value: self.nano, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MoneyValue, rhs: MoneyValue) -> Bool {
    if lhs.currency != rhs.currency {return false}
    if lhs.units != rhs.units {return false}
    if lhs.nano != rhs.nano {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Quotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Quotation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "units"),
    2: .same(proto: "nano"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.units) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.nano) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.units != 0 {
      try visitor.visitSingularInt64Field(value: self.units, fieldNumber: 1)
    }
    if self.nano != 0 {
      try visitor.visitSingularInt32Field(value: self.nano, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Quotation, rhs: Quotation) -> Bool {
    if lhs.units != rhs.units {return false}
    if lhs.nano != rhs.nano {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Ping"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ping, rhs: Ping) -> Bool {
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
