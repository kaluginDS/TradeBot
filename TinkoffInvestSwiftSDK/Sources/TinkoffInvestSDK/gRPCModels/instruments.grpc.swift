//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: instruments.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///Сервис предназначен для получения:</br>**1**. информации об инструментах;</br>**2**.
///расписания торговых сессий;</br>**3**. календаря выплат купонов по облигациям;</br>**4**.
///размера гарантийного обеспечения по фьючерсам;</br>**5**. дивидендов по ценной бумаге.
///
/// Usage: instantiate `InstrumentsServiceClient`, then call methods of this protocol to make API calls.
public protocol InstrumentsServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: InstrumentsServiceClientInterceptorFactoryProtocol? { get }

  func tradingSchedules(
    _ request: TradingSchedulesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TradingSchedulesRequest, TradingSchedulesResponse>

  func bondBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentRequest, BondResponse>

  func bonds(
    _ request: InstrumentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentsRequest, BondsResponse>

  func currencyBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentRequest, CurrencyResponse>

  func currencies(
    _ request: InstrumentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentsRequest, CurrenciesResponse>

  func etfBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentRequest, EtfResponse>

  func etfs(
    _ request: InstrumentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentsRequest, EtfsResponse>

  func futureBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentRequest, FutureResponse>

  func futures(
    _ request: InstrumentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentsRequest, FuturesResponse>

  func shareBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentRequest, ShareResponse>

  func shares(
    _ request: InstrumentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentsRequest, SharesResponse>

  func getAccruedInterests(
    _ request: GetAccruedInterestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetAccruedInterestsRequest, GetAccruedInterestsResponse>

  func getFuturesMargin(
    _ request: GetFuturesMarginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetFuturesMarginRequest, GetFuturesMarginResponse>

  func getInstrumentBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<InstrumentRequest, InstrumentResponse>

  func getDividends(
    _ request: GetDividendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetDividendsRequest, GetDividendsResponse>
}

extension InstrumentsServiceClientProtocol {
  public var serviceName: String {
    return "tinkoff.public.invest.api.contract.v1.InstrumentsService"
  }

  ///Метод получения расписания торгов торговых площадок.
  ///
  /// - Parameters:
  ///   - request: Request to send to TradingSchedules.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func tradingSchedules(
    _ request: TradingSchedulesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TradingSchedulesRequest, TradingSchedulesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/TradingSchedules",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTradingSchedulesInterceptors() ?? []
    )
  }

  ///Метод получения облигации по её идентификатору.
  ///
  /// - Parameters:
  ///   - request: Request to send to BondBy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func bondBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentRequest, BondResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/BondBy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBondByInterceptors() ?? []
    )
  }

  ///Метод получения списка облигаций.
  ///
  /// - Parameters:
  ///   - request: Request to send to Bonds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func bonds(
    _ request: InstrumentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentsRequest, BondsResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Bonds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBondsInterceptors() ?? []
    )
  }

  ///Метод получения валюты по её идентификатору.
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrencyBy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func currencyBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentRequest, CurrencyResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/CurrencyBy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrencyByInterceptors() ?? []
    )
  }

  ///Метод получения списка валют.
  ///
  /// - Parameters:
  ///   - request: Request to send to Currencies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func currencies(
    _ request: InstrumentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentsRequest, CurrenciesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Currencies",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrenciesInterceptors() ?? []
    )
  }

  ///Метод получения инвестиционного фонда по его идентификатору.
  ///
  /// - Parameters:
  ///   - request: Request to send to EtfBy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func etfBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentRequest, EtfResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/EtfBy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEtfByInterceptors() ?? []
    )
  }

  ///Метод получения списка инвестиционных фондов.
  ///
  /// - Parameters:
  ///   - request: Request to send to Etfs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func etfs(
    _ request: InstrumentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentsRequest, EtfsResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Etfs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEtfsInterceptors() ?? []
    )
  }

  ///Метод получения фьючерса по его идентификатору.
  ///
  /// - Parameters:
  ///   - request: Request to send to FutureBy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func futureBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentRequest, FutureResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/FutureBy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFutureByInterceptors() ?? []
    )
  }

  ///Метод получения списка фьючерсов.
  ///
  /// - Parameters:
  ///   - request: Request to send to Futures.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func futures(
    _ request: InstrumentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentsRequest, FuturesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Futures",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFuturesInterceptors() ?? []
    )
  }

  ///Метод получения акции по её идентификатору.
  ///
  /// - Parameters:
  ///   - request: Request to send to ShareBy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func shareBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentRequest, ShareResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/ShareBy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShareByInterceptors() ?? []
    )
  }

  ///Метод получения списка акций.
  ///
  /// - Parameters:
  ///   - request: Request to send to Shares.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func shares(
    _ request: InstrumentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentsRequest, SharesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/Shares",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSharesInterceptors() ?? []
    )
  }

  ///Метод получения накопленного купонного дохода по облигации.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccruedInterests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAccruedInterests(
    _ request: GetAccruedInterestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetAccruedInterestsRequest, GetAccruedInterestsResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetAccruedInterests",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccruedInterestsInterceptors() ?? []
    )
  }

  ///Метод получения размера гарантийного обеспечения по фьючерсам.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFuturesMargin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFuturesMargin(
    _ request: GetFuturesMarginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetFuturesMarginRequest, GetFuturesMarginResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetFuturesMargin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFuturesMarginInterceptors() ?? []
    )
  }

  ///Метод получения основной информации об инструменте.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInstrumentBy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInstrumentBy(
    _ request: InstrumentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<InstrumentRequest, InstrumentResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetInstrumentBy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInstrumentByInterceptors() ?? []
    )
  }

  ///Метод для получения событий выплаты дивидендов по инструменту.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDividends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDividends(
    _ request: GetDividendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetDividendsRequest, GetDividendsResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.InstrumentsService/GetDividends",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDividendsInterceptors() ?? []
    )
  }
}

public protocol InstrumentsServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'tradingSchedules'.
  func makeTradingSchedulesInterceptors() -> [ClientInterceptor<TradingSchedulesRequest, TradingSchedulesResponse>]

  /// - Returns: Interceptors to use when invoking 'bondBy'.
  func makeBondByInterceptors() -> [ClientInterceptor<InstrumentRequest, BondResponse>]

  /// - Returns: Interceptors to use when invoking 'bonds'.
  func makeBondsInterceptors() -> [ClientInterceptor<InstrumentsRequest, BondsResponse>]

  /// - Returns: Interceptors to use when invoking 'currencyBy'.
  func makeCurrencyByInterceptors() -> [ClientInterceptor<InstrumentRequest, CurrencyResponse>]

  /// - Returns: Interceptors to use when invoking 'currencies'.
  func makeCurrenciesInterceptors() -> [ClientInterceptor<InstrumentsRequest, CurrenciesResponse>]

  /// - Returns: Interceptors to use when invoking 'etfBy'.
  func makeEtfByInterceptors() -> [ClientInterceptor<InstrumentRequest, EtfResponse>]

  /// - Returns: Interceptors to use when invoking 'etfs'.
  func makeEtfsInterceptors() -> [ClientInterceptor<InstrumentsRequest, EtfsResponse>]

  /// - Returns: Interceptors to use when invoking 'futureBy'.
  func makeFutureByInterceptors() -> [ClientInterceptor<InstrumentRequest, FutureResponse>]

  /// - Returns: Interceptors to use when invoking 'futures'.
  func makeFuturesInterceptors() -> [ClientInterceptor<InstrumentsRequest, FuturesResponse>]

  /// - Returns: Interceptors to use when invoking 'shareBy'.
  func makeShareByInterceptors() -> [ClientInterceptor<InstrumentRequest, ShareResponse>]

  /// - Returns: Interceptors to use when invoking 'shares'.
  func makeSharesInterceptors() -> [ClientInterceptor<InstrumentsRequest, SharesResponse>]

  /// - Returns: Interceptors to use when invoking 'getAccruedInterests'.
  func makeGetAccruedInterestsInterceptors() -> [ClientInterceptor<GetAccruedInterestsRequest, GetAccruedInterestsResponse>]

  /// - Returns: Interceptors to use when invoking 'getFuturesMargin'.
  func makeGetFuturesMarginInterceptors() -> [ClientInterceptor<GetFuturesMarginRequest, GetFuturesMarginResponse>]

  /// - Returns: Interceptors to use when invoking 'getInstrumentBy'.
  func makeGetInstrumentByInterceptors() -> [ClientInterceptor<InstrumentRequest, InstrumentResponse>]

  /// - Returns: Interceptors to use when invoking 'getDividends'.
  func makeGetDividendsInterceptors() -> [ClientInterceptor<GetDividendsRequest, GetDividendsResponse>]
}

public final class InstrumentsServiceClient: InstrumentsServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: InstrumentsServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the tinkoff.public.invest.api.contract.v1.InstrumentsService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: InstrumentsServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///Сервис предназначен для получения:</br>**1**. информации об инструментах;</br>**2**.
///расписания торговых сессий;</br>**3**. календаря выплат купонов по облигациям;</br>**4**.
///размера гарантийного обеспечения по фьючерсам;</br>**5**. дивидендов по ценной бумаге.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol InstrumentsServiceProvider: CallHandlerProvider {
  var interceptors: InstrumentsServiceServerInterceptorFactoryProtocol? { get }

  ///Метод получения расписания торгов торговых площадок.
  func tradingSchedules(request: TradingSchedulesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<TradingSchedulesResponse>

  ///Метод получения облигации по её идентификатору.
  func bondBy(request: InstrumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<BondResponse>

  ///Метод получения списка облигаций.
  func bonds(request: InstrumentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<BondsResponse>

  ///Метод получения валюты по её идентификатору.
  func currencyBy(request: InstrumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CurrencyResponse>

  ///Метод получения списка валют.
  func currencies(request: InstrumentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CurrenciesResponse>

  ///Метод получения инвестиционного фонда по его идентификатору.
  func etfBy(request: InstrumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EtfResponse>

  ///Метод получения списка инвестиционных фондов.
  func etfs(request: InstrumentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EtfsResponse>

  ///Метод получения фьючерса по его идентификатору.
  func futureBy(request: InstrumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<FutureResponse>

  ///Метод получения списка фьючерсов.
  func futures(request: InstrumentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<FuturesResponse>

  ///Метод получения акции по её идентификатору.
  func shareBy(request: InstrumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ShareResponse>

  ///Метод получения списка акций.
  func shares(request: InstrumentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SharesResponse>

  ///Метод получения накопленного купонного дохода по облигации.
  func getAccruedInterests(request: GetAccruedInterestsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetAccruedInterestsResponse>

  ///Метод получения размера гарантийного обеспечения по фьючерсам.
  func getFuturesMargin(request: GetFuturesMarginRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetFuturesMarginResponse>

  ///Метод получения основной информации об инструменте.
  func getInstrumentBy(request: InstrumentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<InstrumentResponse>

  ///Метод для получения событий выплаты дивидендов по инструменту.
  func getDividends(request: GetDividendsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetDividendsResponse>
}

extension InstrumentsServiceProvider {
  public var serviceName: Substring { return "tinkoff.public.invest.api.contract.v1.InstrumentsService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "TradingSchedules":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradingSchedulesRequest>(),
        responseSerializer: ProtobufSerializer<TradingSchedulesResponse>(),
        interceptors: self.interceptors?.makeTradingSchedulesInterceptors() ?? [],
        userFunction: self.tradingSchedules(request:context:)
      )

    case "BondBy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentRequest>(),
        responseSerializer: ProtobufSerializer<BondResponse>(),
        interceptors: self.interceptors?.makeBondByInterceptors() ?? [],
        userFunction: self.bondBy(request:context:)
      )

    case "Bonds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentsRequest>(),
        responseSerializer: ProtobufSerializer<BondsResponse>(),
        interceptors: self.interceptors?.makeBondsInterceptors() ?? [],
        userFunction: self.bonds(request:context:)
      )

    case "CurrencyBy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentRequest>(),
        responseSerializer: ProtobufSerializer<CurrencyResponse>(),
        interceptors: self.interceptors?.makeCurrencyByInterceptors() ?? [],
        userFunction: self.currencyBy(request:context:)
      )

    case "Currencies":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentsRequest>(),
        responseSerializer: ProtobufSerializer<CurrenciesResponse>(),
        interceptors: self.interceptors?.makeCurrenciesInterceptors() ?? [],
        userFunction: self.currencies(request:context:)
      )

    case "EtfBy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentRequest>(),
        responseSerializer: ProtobufSerializer<EtfResponse>(),
        interceptors: self.interceptors?.makeEtfByInterceptors() ?? [],
        userFunction: self.etfBy(request:context:)
      )

    case "Etfs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentsRequest>(),
        responseSerializer: ProtobufSerializer<EtfsResponse>(),
        interceptors: self.interceptors?.makeEtfsInterceptors() ?? [],
        userFunction: self.etfs(request:context:)
      )

    case "FutureBy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentRequest>(),
        responseSerializer: ProtobufSerializer<FutureResponse>(),
        interceptors: self.interceptors?.makeFutureByInterceptors() ?? [],
        userFunction: self.futureBy(request:context:)
      )

    case "Futures":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentsRequest>(),
        responseSerializer: ProtobufSerializer<FuturesResponse>(),
        interceptors: self.interceptors?.makeFuturesInterceptors() ?? [],
        userFunction: self.futures(request:context:)
      )

    case "ShareBy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentRequest>(),
        responseSerializer: ProtobufSerializer<ShareResponse>(),
        interceptors: self.interceptors?.makeShareByInterceptors() ?? [],
        userFunction: self.shareBy(request:context:)
      )

    case "Shares":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentsRequest>(),
        responseSerializer: ProtobufSerializer<SharesResponse>(),
        interceptors: self.interceptors?.makeSharesInterceptors() ?? [],
        userFunction: self.shares(request:context:)
      )

    case "GetAccruedInterests":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetAccruedInterestsRequest>(),
        responseSerializer: ProtobufSerializer<GetAccruedInterestsResponse>(),
        interceptors: self.interceptors?.makeGetAccruedInterestsInterceptors() ?? [],
        userFunction: self.getAccruedInterests(request:context:)
      )

    case "GetFuturesMargin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetFuturesMarginRequest>(),
        responseSerializer: ProtobufSerializer<GetFuturesMarginResponse>(),
        interceptors: self.interceptors?.makeGetFuturesMarginInterceptors() ?? [],
        userFunction: self.getFuturesMargin(request:context:)
      )

    case "GetInstrumentBy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<InstrumentRequest>(),
        responseSerializer: ProtobufSerializer<InstrumentResponse>(),
        interceptors: self.interceptors?.makeGetInstrumentByInterceptors() ?? [],
        userFunction: self.getInstrumentBy(request:context:)
      )

    case "GetDividends":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetDividendsRequest>(),
        responseSerializer: ProtobufSerializer<GetDividendsResponse>(),
        interceptors: self.interceptors?.makeGetDividendsInterceptors() ?? [],
        userFunction: self.getDividends(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol InstrumentsServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'tradingSchedules'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTradingSchedulesInterceptors() -> [ServerInterceptor<TradingSchedulesRequest, TradingSchedulesResponse>]

  /// - Returns: Interceptors to use when handling 'bondBy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBondByInterceptors() -> [ServerInterceptor<InstrumentRequest, BondResponse>]

  /// - Returns: Interceptors to use when handling 'bonds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBondsInterceptors() -> [ServerInterceptor<InstrumentsRequest, BondsResponse>]

  /// - Returns: Interceptors to use when handling 'currencyBy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrencyByInterceptors() -> [ServerInterceptor<InstrumentRequest, CurrencyResponse>]

  /// - Returns: Interceptors to use when handling 'currencies'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrenciesInterceptors() -> [ServerInterceptor<InstrumentsRequest, CurrenciesResponse>]

  /// - Returns: Interceptors to use when handling 'etfBy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEtfByInterceptors() -> [ServerInterceptor<InstrumentRequest, EtfResponse>]

  /// - Returns: Interceptors to use when handling 'etfs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEtfsInterceptors() -> [ServerInterceptor<InstrumentsRequest, EtfsResponse>]

  /// - Returns: Interceptors to use when handling 'futureBy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFutureByInterceptors() -> [ServerInterceptor<InstrumentRequest, FutureResponse>]

  /// - Returns: Interceptors to use when handling 'futures'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFuturesInterceptors() -> [ServerInterceptor<InstrumentsRequest, FuturesResponse>]

  /// - Returns: Interceptors to use when handling 'shareBy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeShareByInterceptors() -> [ServerInterceptor<InstrumentRequest, ShareResponse>]

  /// - Returns: Interceptors to use when handling 'shares'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSharesInterceptors() -> [ServerInterceptor<InstrumentsRequest, SharesResponse>]

  /// - Returns: Interceptors to use when handling 'getAccruedInterests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAccruedInterestsInterceptors() -> [ServerInterceptor<GetAccruedInterestsRequest, GetAccruedInterestsResponse>]

  /// - Returns: Interceptors to use when handling 'getFuturesMargin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFuturesMarginInterceptors() -> [ServerInterceptor<GetFuturesMarginRequest, GetFuturesMarginResponse>]

  /// - Returns: Interceptors to use when handling 'getInstrumentBy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInstrumentByInterceptors() -> [ServerInterceptor<InstrumentRequest, InstrumentResponse>]

  /// - Returns: Interceptors to use when handling 'getDividends'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDividendsInterceptors() -> [ServerInterceptor<GetDividendsRequest, GetDividendsResponse>]
}
